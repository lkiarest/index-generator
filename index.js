const fs = require('fs')
const path = require('path')

const ignoreDirs = ['@eaDir', 'node_modules', '.DS_Store', '.git']
const ignoreFiles = ['index.html', 'admin.html', 'app.js', 'create-index.js', 'nohup.out', 'server.js', 'index.js', '.DS_Store', 'Thumbs.db']
const PAGE_FLAG = 'auto generated by qintx'

function isValidDir(dir) {
  return ignoreDirs.indexOf(dir) === -1
}

function isValidFile(dir) {
  return ignoreFiles.indexOf(dir) === -1
}

// check whether can create index file
function checkDir(dir) {
  const targetFile = path.join(dir, 'index.html')

  if (!fs.existsSync(targetFile)) {
    return true
  }

  const content = fs.readFileSync(targetFile, 'utf-8')
  return content.indexOf(PAGE_FLAG) > -1
}

// get valid folder list in current dir
function getDirList(dir) {
  const dirList = fs.readdirSync(dir)
  return dirList.filter(dirname => {
    return isValidDir(dirname) && fs.lstatSync(path.join(dir, dirname)).isDirectory()
  })
}

// get all valid files in current dir
function getFileList(dir) {
  const dirList = fs.readdirSync(dir)
  return dirList.filter(dirname => {
    return isValidFile(dirname) && !fs.lstatSync(path.join(dir, dirname)).isDirectory()
  })
}

// create index file in current dir
function createSingleHtml(dir, isRoot) {
  let content = `<html>
  <head>
    <!-- ${PAGE_FLAG} -->
    <meta charset="utf-8"/>
    <title>Design</title>
    <style> body { padding: 20px; } </style>
  </head>
  <body>
{{ParentLink}}
{{DirList}}
{{FileList}}
  </body>
</html>`

  const parentLink = isRoot ? '' : '<a href="../">上一级</a></br>'
  content = content.replace('{{ParentLink}}', parentLink)

  const listContent =  getDirList(dir).map(dirname => {
    return `    <a href="./${dirname}/">${dirname}</a></br>`
  })

  const fileList = isRoot ? [] : getFileList(dir).map(filename => {
    return `    <a href="./${filename}">${filename}</a></br>`
  })

  if (listContent.length > 0 || fileList.length > 0) {
    const targetFile = path.join(dir, isRoot ? 'index-all.html': 'index.html')
    content = content.replace('{{DirList}}', listContent.join('\r\n')).replace('{{FileList}}', fileList.join('\r\n'))
    fs.writeFileSync(targetFile, content, 'utf-8')
    console.log(`${targetFile} generated!`)
  }
}

// create all index files
// function createIndexes(current, isRoot) {
//   if (!checkDir(current)) {
//     return
//   }

//   createSingleHtml(current, isRoot)

//   getDirList(current).forEach(item => {
//     createIndexes(path.join(current, item), false)
//   })
// }

// 创建全部索引文件
function createIndexes(current, isRoot) {
  walk(current, function(dir, bRoot) {
    createSingleHtml(dir, bRoot)
  }, isRoot)
}

// 清除所有索引文件
function clear(current) {
  walk(current, function(dir, isRoot) {
    if (isRoot) {
      return
    }

    const indexFile = path.join(dir, 'index.html')
    if (fs.existsSync(indexFile)) {
      fs.unlinkSync(indexFile)
      console.log(`remove ${indexFile}`)
    }
  })
}

// 递归遍历目录，执行指定操作
function walk(dir, callback, isRoot = true) {
  // if (isRoot) {
  //   getDirList(dir).forEach(item => {
  //     walk(path.join(dir, item), callback, false)
  //   })

  //   return
  // }

  if (checkDir(dir)) {
    callback(dir, isRoot)
  }

  getDirList(dir).forEach(item => {
    walk(path.join(dir, item), callback, false)
  })
}

// 执行索引创建
function run(rootDir) {
  console.log('run in ' + rootDir)
  console.log('start generating ...')

  createIndexes(rootDir, true)

  console.log('done!')
}

module.exports = { run, clear }
